package cn.iscast_01;

import java.awt.Frame;

public class FrameDemo {
	public static void main(String[] args){
		//创建窗体对象
		Frame f = new Frame();
		
		//设置窗体标题
		f.setTitle("HelloWorld");
		
		//设置窗体大小
		f.setSize(400,300); //单位：像素（长，宽）
		
		//设置窗体位置
		f.setLocation(400, 200);
		
		//调用一个方法，设置让窗体可见
		//f.show();
		f.setVisible(true);
	}
}
package cn.iscast_01;

import java.awt.Frame;

public class FrameDemp2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Frame f = new Frame("方法调用的前后关系");
		
		//f.setSize(400, 300);
		//f.setLocation(400, 200);
		
		f.setBounds(400, 200, 400, 300);
		
		f.setVisible(true);
	}

}

事件监听机制：
	A：事件源
	B：事件
	C:事件处理
	D：事件监听
	
举例：人受伤事件
	事件源：人
		Person p1 = new Person("张三");
		Person p2 = new Person("李四");
	事件：受伤
		interface 受伤接口{
			一拳（）；
			一脚（）；
			一板砖（）；
		}
	事件处理：
		受伤处理类 implements 受伤接口{
			一拳（）{System.out.println("鼻子流血了，送到卫生间");}
			一脚（）{System.out.println("晕倒了，送到通风处");}
			一板砖（）{System.out.println("头破血流，送到太平间");}
		}
	事件监听：
		p1.注册监听（受伤接口）
		

窗口关闭机制：适配器的运用

import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

public class FrameDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Frame f = new Frame("窗体关闭机制");
		
		//设置窗体属性
		f.setBounds(400, 200, 400, 300);
		
		//让窗体关闭
		//事件源：窗体
		//事件：关闭
		//事件处理：关闭窗口
		//事件监听：
//		f.addWindowListener(new WindowListener(){
//
//			@Override
//			public void windowActivated(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//
//			@Override
//			public void windowClosed(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//
//			@Override
//			public void windowClosing(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				System.exit(0);
//			}
//
//			@Override
//			public void windowDeactivated(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//
//			@Override
//			public void windowDeiconified(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//
//			@Override
//			public void windowIconified(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//
//			@Override
//			public void windowOpened(WindowEvent arg0) {
//				// TODO Auto-generated method stub
//				
//			}
//			
//		});
		
		//用适配器类改进
		f.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				System.exit(0);
			}

		});

		//设置窗体可见
		f.setVisible(true);
		
	}

}


package cn.itcast_04;

import java.awt.Button;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/*
 * 需求：把按钮添加到窗体，并对按钮添加一个点击事件。
 * A：创建窗体对象
 * B：创建按钮对象
 * C：把按钮添加到窗体
 * D：窗体显示
*/
public class FrameDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//创建窗体对象
		Frame f = new Frame("添加按钮");
		//设置属性
		f.setBounds(400, 200, 400, 300);
		
		//设置布局为流式布局
		f.setLayout(new FlowLayout());
		
		//创建按钮对象
		Button bu = new Button("点我");
		bu.setSize(20, 10);
		
		//把按钮添加到窗体
		f.add(bu);
		
		//设置窗体可以关闭
		f.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				System.exit(0);
			}
		});
		
		bu.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				System.out.println("你再点试试");
			}
		});
		
		//窗体显示
		f.setVisible(true);
	}

}



package cn.itcast_05;

import java.awt.Button;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class FrameDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//创建窗体对象
		Frame f = new Frame("数据转移");
		
		
		//设置窗体属性和布局
		f.setBounds(400, 200, 400, 300);
		f.setLayout(new FlowLayout());
		
		//创建文本框
		TextField tf = new TextField(20);
		//创建按钮
		Button bu = new Button("数据转移");
		//创建文本域
		TextArea ta = new TextArea(10, 40);
		
		//把组件添加到窗体
		f.add(tf);
		f.add(bu);
		f.add(ta);
		
		//设置窗体关闭
		f.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub
				System.exit(0);
			}
		});
		
		//对按钮添加事件
		bu.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				//获取文本框的值
				String tf_str = tf.getText().trim();
				//清空数据
				tf.setText(null);
				
				//设置给文本域
				//ta.setText(tf_str);
				ta.append(tf_str+"\n");
				
				//获取光标
				tf.requestFocus();
			}
		});
		
		f.setVisible(true);
	}
	
}
