*整数相除只能得到整数；

int x = 3;
int y = 4;
System.out.printIn(x/y);  //结果为0
System.out.printIn(x*1.0/y);  //结果为0.75
×1.0后变成了浮点数

将a,b的值互换
1.通过第三方temp转接
2.通过异或
  a=a^b;
  b=a^b;
  a=a^b;
3.通过加减法
  a=a+b;
  b=a-b;
  a=a-b;
  
  
  s+=1
  不等价于 s= s + 1;
  而是等价于 s = (s的数据类型)（s+1）;
  
  &&和&
  A:最终结果一样;
  B:&&具有短路作用；
  只要第一个为False，则第二个不执行;


方法重载：
在同一个类中，允许存在同名方法，只要参数个数或者参数类型不同即可，与返回值类型无关。

数组命名方式：(推荐格式)
int[] a ;
动态初始化：
	数据类型[]  数组名 = new 数据类型[数组长度];
	new 为数组分配内存空间
静态初始化：
	数据类型[] 数组名 = new 数据类型[]{元素1，元素2，...};
	简化格式：数据类型[] 数组名 = {元素1，元素2，...};
	
继承：  A.只支持单继承
	B.支持多层继承
	C.子类不能继承父类的私有方法，也不可继承私有成员变量
	
关于public,protected,默认,private的访问权限范围：
	在同类下，都可见;
	在同一个包下，子类无法访问父类private修饰内容;
	在不同包下，子类无法访问父类默认修饰内容;
状态修饰符:static , final
抽象修饰符:abstract

多态前提：A.要有继承关系 B.要有方法重写 C.要有父类引用只想子类对象 父 f = new 子();

多态中成员变量的访问特点：
A.成员变量:编译看左边,编译看左边（左边指父类）
B.构造方法:创建子类对象的时候，访问父类的构造方法，对父类进行初始化
C.成员方法:编译看左边,运行看右边（右边指子类）
D.静态方法:编译和运行均看左边（因为静态和类相关，不能重写，访问的还是左边）

多态的好处：维护性和扩展性

对象间的转型问题：
向上转型:Fu f = new Zi();
向下转型:Zi z = (Zi) f ; 使用子类的特有功能

多态同子类间的转型：
	Animal a = new Dog(); //定义狗
	a.eat();
	Dog d = (Dog) a;	//还原成狗
	d.eat();
不同子类：//变成猫
	a = new Cat();
	//还原成猫
	Cat c = (Cat) a;
错误的转换方式：
	Dog dd = new Animal();
	Dog ddd = new Cat();
