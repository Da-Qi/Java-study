**使用while与自增运算符循环遍历数组**
public class ErgodicArray {		//遍历数组

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] aves = new String[] {"白鹭","丹顶鹤","黄鹂","鹦鹉",
				"乌鸦","喜鹊","布谷鸟","灰纹鸟","百灵鸟"};
		int index = 0;		//创建索引变量
		System.out.println("我的花园有很多鸟，它们分别是：");
		while(index <= aves.length) {		//遍历数组
			System.out.println(aves[index++]);	//自增索引值
		}
	}

}
**使用for输出杨辉三角**
public class YanghuiTriangle {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int triangle[][] = new int[8][];		//创建二维数组
		//遍历二维数组的第一层
		for(int i = 0;i<triangle.length;i++) {
			triangle[i]=new int[i+1];		//初始化第二层数组的大小
			//遍历第二层数组
			for(int j = 0;j<=triangle[i].length-1;j++) {
				//将两侧的数组元素赋值为1；
				if(i==0||j==0||j==triangle[i].length-1) {
					triangle[i][j]=1;
				}else {					//其他数值通过公式计算
					triangle[i][j]=triangle[i-1][j]+triangle[i-1][j-1];
				}
				//输出数组元素
				System.out.print(triangle[i][j]+"\t");
			}
			System.out.println();
		}
	}

}

**嵌套循环输出九九乘法表**

public class MultiplicationTable {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		for(int i = 1;i<=9;i++) { 		//循环控制变量从1到9
			for(int j = 1;j<=i;j++) {	//第二层循环控制变量与第一层的最大索引相等
				System.out.print(j+"*"+i+"="+i*j+"\t");
			}
			System.out.println();
		}
	}
}
*用while循环计算*
import java.math.BigDecimal;
public class Example {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BigDecimal sum = new BigDecimal(0.0);		//和
		BigDecimal factorial = new BigDecimal(1.0);	//阶乘项的计算结果
		int i = 1;	//循环增量
		while(i <= 20) {
			sum = sum.add(factorial);		//累加各阶乘的和
			i++;
			factorial = factorial.multiply(new BigDecimal(1.0/i));
		}
		System.out.println("1+1/2!+1/3!+···+1/20！的计算结果为:"+sum);
	}

}
**for循环输出空心的菱形**

public class Diamond {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		printHollowRhombus(10);
	}
	public static void printHollowRhombus(int size) {
		if(size %2 ==0) {
			size++;
		}					//计算菱形的大小
		for(int i=0;i<size/2+1;i++) {		//size/2+1表示上部分的行数
			for(int j=size/2+1;j>i+1;j--) {
				System.out.print(" "); 		//输出左上角位置的空白
			}
			for(int j=0;j<2*i+1;j++) {
				if(j == 0||j == 2*i) {
					System.out.print("*");	//输出菱形上部分的边缘
				}
				else {
					System.out.print(" "); 		//输出菱形上部分的中心
				}
			}
			System.out.println();			//不要忘记了换行
		}
		for(int i=0;i<size/2;i++) {		//下部分一共有size/2行
			for(int j=i+1;j>0;j--) {
				System.out.print(" "); 		//输出左下角位置的空白
			}
			for(int j=0;j<2*(size/2-i)-1;j++) {
				if(j == 0||j == 2*(size/2-i-1)) {
					System.out.print("*");	//输出菱形下部分的边缘
				}
				else {
					System.out.print(" "); 		//输出菱形下部分的中心
				}
			}
			System.out.println();
		}
	}
}
